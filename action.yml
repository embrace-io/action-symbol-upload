# https://docs.github.com/en/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
name: "Upload Symbols to Embrace"
description: "Upload symbols for your application to Embrace."
branding:
  icon: "upload-cloud"
  color: "yellow"
inputs:
  app_id:
    description: "Embrace app identifier (5 characters)"
    required: true
  api_token:
    description: "Embrace symbol upload API token (32 hex characters), see https://dash.embrace.io/settings/organization/api"
    required: true
  tool_version:
    description: "Version for embrace_support.zip tool"
    required: false
    default: "latest"
  type:
    description: "Type of upload to perform (dsym, react-native)"
    required: false
    default: "dsym"
runs:
  # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  using: "composite"
  steps:
    - name: Determine embrace_support version
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [ '${{ inputs.tool_version }}' == 'latest' ]; then
          gh release list --repo embrace-io/action-symbol-upload --json tagName --jq '.[] | select(.tagName | startswith("embrace_support-")) | .tagName' --order desc > embrace_support_versions.txt
          version=$(cat embrace_support_versions.txt | head -n 1)
        else
          version='${{ inputs.tool_version }}'
        fi

        echo "Using tool version ${version}"
        echo "SUPPORT_TOOL=${version}" >> $GITHUB_ENV
      shell: bash

    - name: Download embrace_support.zip
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release --repo embrace-io/action-symbol-upload download ${SUPPORT_TOOL} --pattern 'embrace_support-*' --clobber
      shell: bash

    - name: Verify and extract embrace_support.zip
      run: |
        if /usr/bin/shasum -a 256 -c ${SUPPORT_TOOL}.zip.sha256; then
          unzip -o ${SUPPORT_TOOL}.zip
        else
          echo "Checksum verification failed, aborting."
          exit 1
        fi
      shell: bash

    - name: Determine platform and architecture
      run: |
        upload_binary=embrace_symbol_upload.$(uname | tr A-Z a-z)

        if [ $(uname) == "Linux" ]; then
          if [ $(uname -m) == "aarch64" ]; then
            upload_binary=${upload_binary}-arm64
          else
            upload_binary=${upload_binary}-amd64
          fi
        fi

        echo "Will use ${upload_binary}"
        echo "SYMBOL_UPLOAD_BINARY=${upload_binary}" >> $GITHUB_ENV
      shell: bash

    - name: Upload symbols
      env:
        EMBRACE_APP: "${{ inputs.app_id }}"
        EMBRACE_API_TOKEN: "${{ inputs.api_token }}"
        EMBRACE_DEBUG_DSYM: "1"
        EMBRACE_LOG_LEVEL: "info"
        BUILD_ROOT: "${{ github.workspace }}"
      run: |
        # https://embrace.io/docs/ios/open-source/getting-started/symbolicating-crash-reports/
        if [ '${{ inputs.type }}' == 'dsym' ]; then
          for dir in $(find . -type d -name \*.dSYM | grep -v __MACOSX); do
            echo "Working on ${dir}"

            for dsym_file in "${dir}"/Contents/Resources/DWARF/*; do
              echo "Running ./${SYMBOL_UPLOAD_BINARY} --dsym ${dsym_file}"
              ./${SYMBOL_UPLOAD_BINARY} --dsym "${dsym_file}"
            done
          done
        fi

        # https://embrace.io/docs/react-native/integration/upload-symbol-files/
        if [ '${{ inputs.type }}' == 'react-native' ]; then
          for bundle in $(find . -type f -name \*.jsbundle -o -name \*.bundle | grep -v intermediates); do
            echo "Working on ${bundle}"
            bundle_file=$(basename ${bundle})
            bundle_map=$(find . -type f -name ${bundle_file}.map)

            # Skip if no sourcemap file was found
            if [ -z "$bundle_map" ]; then
              echo "Skipping on ${bundle} as no sourcemap was found."
              continue
            fi

            echo "Running ./${SYMBOL_UPLOAD_BINARY} --rn-bundle ${bundle} --rn-map ${bundle_map}"
            ./${SYMBOL_UPLOAD_BINARY} --rn-bundle "${bundle}" --rn-map "${bundle_map}"
          done
        fi
      shell: bash
